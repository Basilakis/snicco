<?php


    declare(strict_types = 1);


    namespace WPEmerge\Http;

    use Psr\Http\Server\MiddlewareInterface;
    use Psr\Http\Server\RequestHandlerInterface;
    use Psr\Http\Message\ResponseInterface;
    use Psr\Http\Message\ServerRequestInterface;
    use WPEmerge\Http\Psr7\Request;
    use WPEmerge\Http\Psr7\Response;

    /**
     * PSR-15 delegate wrapper for internal callbacks generated by {@see Dispatcher} during
     * dispatch.
     */
    class Delegate implements RequestHandlerInterface, MiddlewareInterface
    {

        /**
         * @var callable
         */
        private $callback;

        /**
         * @param  callable  $callback  function (RequestInterface $request) : ResponseInterface
         */
        public function __construct(callable $callback)
        {

            $this->callback = $callback;

        }

        /**
         * Dispatch the next available middleware and return the response.
         *
         * @param  Request  $request
         *
         * @return Response
         */
        public function handle(ServerRequestInterface $request) : ResponseInterface
        {
            return ($this->callback)($request);

        }

        /**
         * Dispatch the next available middleware and return the response.
         *
         * This method duplicates `handle()` to provide support for `callable` middleware.
         *
         * @param  Request  $request
         *
         * @return Response
         */
        public function __invoke(Request $request) : ResponseInterface
        {

            return $this->handle($request);

        }

        public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
        {

            return $this->handle($request);

        }




    }